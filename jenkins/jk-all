#!/usr/bin/env bash
set -e
set -x
THIS=$(dirname $0)

# Jenkins bot can request a change to the default build configuration.
# Currently we support the syntax:
# build with compiler:compiler1; cmake_extra_options:-Dopt1, -Dopt2, ..., -DoptN!

# Get the first line of the github comment.
BOT_COMMAND=${ghprbCommentBody/%'\r\n'*/''}

if [[ "$BOT_COMMAND" == *build\ with*\! ]]; then
  # We are left with 'build with real command!'
  if [[ "$BOT_COMMAND" =~ [[:space:]]*(compiler:)[[:space:]]*(.*)\;[[:space:]]*(extra_cmake_options:)(.*)[[:space:]]*\! ]]; then
      echo "Modifying the default config as the ph-sft bot requested."
      echo "Swapping $COMPILER with ${BASH_REMATCH[2]}"
      COMPILER=${BASH_REMATCH[2]}
      echo "Swapping $ExtraCMakeOptions with ${BASH_REMATCH[4]}"
      ExtraCMakeOptions=${BASH_REMATCH[4]}
  fi
fi

# Set the home directory for slc6 and centos7 to avoid dealing with afs and kerb tickets with ccache on PRs.
if [[ "$MODE" == "pullrequests" ]]
then
    if [ "$LABEL" == "slc6" ] ||  [ "$LABEL" == "centos7" ]
    then
        HOME=/build
    fi
fi

echo source $THIS/jk-setup.sh $LABEL $COMPILER $BUILDTYPE $EXTERNALS > setup.sh
source $THIS/jk-setup.sh $LABEL $COMPILER $BUILDTYPE $EXTERNALS

echo "Dumping the full environment ---------------------------------------------------------"
env | grep -v ghprbPullLongDescription | grep -v ghprbPullDescription | grep -v ghprbPullTitle | sort | sed 's/:/:?     /g' | tr '?' '\n'
declare -p > $WORKSPACE/jenkins_node_env.sh
echo "--------------------------------------------------------------------------------------"

#---Create stampfile to enable our jenkins to purge old builds------------------------------
touch $WORKSPACE/controlfile

#---Run the CTest script depending on the compiler------------------------------------------
if [[ $COMPILER == *classic* ]]
then

    ctest -VV -S ${THIS}/root-classic.cmake
    status=$?

else

    if [[ "$1" != "test" ]]; then 
        ctest -j4 -VV -S ${THIS}/root-build.cmake
        status=$?

        # do not run the tests if continous build fails
        if [ $status -ne 0 ] && [ "$MODE" = continuous ]; then
            exit $status
        fi

        # do not run tests if coverity run
        if [ "$BUILDOPTS" == coverity ]; then
            exit $status
        fi
    fi

    if [[ "$1" != "build" ]]; then 
        ctest -j4 --no-compress-output -V -S ${THIS}/root-test.cmake
        status=$?
    fi
fi

exit $status

